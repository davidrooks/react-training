// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should display frist image when images are loaded 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt="tags1"
          src="image1"
        />,
        <div
          className="Navigator"
        >
          <button
            onClick={[Function]}
          >
            <img
              alt="left arrow"
              id="previousImage"
              src="arrow.svg"
            />
          </button>
          <button
            onClick={[Function]}
          >
            <img
              alt="right arrow"
              id="nextImage"
              src="arrow.svg"
            />
          </button>
        </div>,
      ],
      "className": "ImageCarousel",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "tags1",
          "src": "image1",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>,
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>,
          ],
          "className": "Navigator",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "left arrow",
                "id": "previousImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "right arrow",
                "id": "nextImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="tags1"
            src="image1"
          />,
          <div
            className="Navigator"
          >
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>
          </div>,
        ],
        "className": "ImageCarousel",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "tags1",
            "src": "image1",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                onClick={[Function]}
              >
                <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />
              </button>,
              <button
                onClick={[Function]}
              >
                <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />
              </button>,
            ],
            "className": "Navigator",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "left arrow",
                  "id": "previousImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "right arrow",
                  "id": "nextImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`should display next image when next button clicked 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt="tags2"
          src="image2"
        />,
        <div
          className="Navigator"
        >
          <button
            onClick={[Function]}
          >
            <img
              alt="left arrow"
              id="previousImage"
              src="arrow.svg"
            />
          </button>
          <button
            onClick={[Function]}
          >
            <img
              alt="right arrow"
              id="nextImage"
              src="arrow.svg"
            />
          </button>
        </div>,
      ],
      "className": "ImageCarousel",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "tags2",
          "src": "image2",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>,
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>,
          ],
          "className": "Navigator",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "left arrow",
                "id": "previousImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "right arrow",
                "id": "nextImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="tags2"
            src="image2"
          />,
          <div
            className="Navigator"
          >
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>
          </div>,
        ],
        "className": "ImageCarousel",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "tags2",
            "src": "image2",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                onClick={[Function]}
              >
                <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />
              </button>,
              <button
                onClick={[Function]}
              >
                <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />
              </button>,
            ],
            "className": "Navigator",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "left arrow",
                  "id": "previousImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "right arrow",
                  "id": "nextImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`should display previous image when previous button clicked 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt="tags6"
          src="image6"
        />,
        <div
          className="Navigator"
        >
          <button
            onClick={[Function]}
          >
            <img
              alt="left arrow"
              id="previousImage"
              src="arrow.svg"
            />
          </button>
          <button
            onClick={[Function]}
          >
            <img
              alt="right arrow"
              id="nextImage"
              src="arrow.svg"
            />
          </button>
        </div>,
      ],
      "className": "ImageCarousel",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "tags6",
          "src": "image6",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>,
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>,
          ],
          "className": "Navigator",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "left arrow",
                "id": "previousImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "right arrow",
                "id": "nextImage",
                "src": "arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="tags6"
            src="image6"
          />,
          <div
            className="Navigator"
          >
            <button
              onClick={[Function]}
            >
              <img
                alt="left arrow"
                id="previousImage"
                src="arrow.svg"
              />
            </button>
            <button
              onClick={[Function]}
            >
              <img
                alt="right arrow"
                id="nextImage"
                src="arrow.svg"
              />
            </button>
          </div>,
        ],
        "className": "ImageCarousel",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "tags6",
            "src": "image6",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                onClick={[Function]}
              >
                <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />
              </button>,
              <button
                onClick={[Function]}
              >
                <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />
              </button>,
            ],
            "className": "Navigator",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="left arrow"
                  id="previousImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "left arrow",
                  "id": "previousImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  alt="right arrow"
                  id="nextImage"
                  src="arrow.svg"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "right arrow",
                  "id": "nextImage",
                  "src": "arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`should render error message if error state 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        Sorry, there was an error, please try again later.
      </p>,
      "className": "App",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Sorry, there was an error, please try again later.",
      },
      "ref": null,
      "rendered": "Sorry, there was an error, please try again later.",
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          Sorry, there was an error, please try again later.
        </p>,
        "className": "App",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sorry, there was an error, please try again later.",
        },
        "ref": null,
        "rendered": "Sorry, there was an error, please try again later.",
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`should render error message if error state and images have been loaded 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        Sorry, there was an error, please try again later.
      </p>,
      "className": "App",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Sorry, there was an error, please try again later.",
      },
      "ref": null,
      "rendered": "Sorry, there was an error, please try again later.",
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          Sorry, there was an error, please try again later.
        </p>,
        "className": "App",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sorry, there was an error, please try again later.",
        },
        "ref": null,
        "rendered": "Sorry, there was an error, please try again later.",
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`should render loading message when no images and no error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        Loading...
      </p>,
      "className": "App",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Loading...",
      },
      "ref": null,
      "rendered": "Loading...",
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          Loading...
        </p>,
        "className": "App",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Loading...",
        },
        "ref": null,
        "rendered": "Loading...",
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
